import randomimport numpy as npimport multiprocessing as mpimport osimport pandas as pdfrom time import timedef Sample(N, p = None, maxw = 1000, name = False):    if p == None:        p = (2 * np.log(N) + 1) / N    assert(p >= 2 * np.log(N) / N)    # if p > 2lnN/N, then G will be almost always connected when N is big enough.     nCPU, sta, des, weight = mp.cpu_count(), [], [], []    x = mp.Pool(nCPU).starmap(EdgeGenerator, NodePairPartition(N, p, maxw, nCPU))    random.shuffle(x)    for es in x:        sta.extend(es[0])        des.extend(es[1])        weight.extend(es[2])    if not name:        name = str(N)    if not os.path.exists('sample'):        os.mkdir('sample')    sta.append(N)    des.append(len(weight))    weight.append(0)    pd.DataFrame({'sta': sta, 'des': des, 'weight': weight}).to_csv('sample/' + name + '.csv')def NodePairPartition(N, p, maxw, nCPU):    npe = N * (N - 1) // 2    w, r, s, pts = npe // nCPU, npe % nCPU, 0, []    for i in range(r):        x = np.ceil((2*N - 1 - np.sqrt((2*N - 1)**2 - 8*(s + 1))) / 2)-1        y = x + s + 1 - (N - 0.5 - x / 2) * x        s += w + 1        pts.append((N, p, maxw, int(x), int(y), w + 1))    for i in range(nCPU - r):        x = np.ceil((2*N - 1 - np.sqrt((2*N - 1)**2 - 8*(s + 1))) / 2)-1        y = x + s + 1 - (N - 0.5 - x / 2) * x        s += w        pts.append((N, p, maxw, int(x), int(y), w))    return pts    def EdgeGenerator(N, p, maxw, x, y, wide):    sta, des, weight = [], [], []    for i in range(wide):        rf = random.random()        if rf < p:            weight.append((random.randrange(maxw)))            if rf < p / 2:                sta.append(x)                des.append(y)                else:                sta.append(y)                des.append(x)        y += 1        if y > N - 1:            x += 1            y = x + 1    return sta, des, weight# Sampleif __name__ == '__main__':    for size in range(100000, 1000001, 100000):        t = time()        Sample(size)        print('Graph Size:', size, ', Time Cost:', time() - t, 's.')